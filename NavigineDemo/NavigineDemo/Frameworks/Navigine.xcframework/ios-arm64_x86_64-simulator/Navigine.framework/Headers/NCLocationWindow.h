// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from location_window.djinni

#import "NCAnimationType.h"
#import "NCCamera.h"
#import "NCCameraCallback.h"
#import "NCDebugFlag.h"
#import "NCExport.h"
#import "NCPoint.h"
#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
@class NCCircleMapObject;
@class NCFlatIconMapObject;
@class NCIconMapObject;
@class NCPolylineMapObject;
@protocol NCCameraListener;
@protocol NCInputListener;
@protocol NCPickListener;


DEFAULT_EXPORT_ATTRIBUTE
@interface NCLocationWindow : NSObject

- (void)setSublocationId:(int32_t)id;

- (nonnull NCPoint *)screenPositionToMeters:(CGPoint)point;

- (CGPoint)metersToScreenPosition:(nonnull NCPoint *)point
                   clipToViewport:(BOOL)clipToViewport;

- (nullable NCCircleMapObject *)addCircleMapObject;

- (BOOL)removeCircleMapObject:(nullable NCCircleMapObject *)circleMapObject;

- (nullable NCIconMapObject *)addIconMapObject;

- (BOOL)removeIconMapObject:(nullable NCIconMapObject *)iconMapObject;

- (nullable NCFlatIconMapObject *)addFlatIconMapObject;

- (BOOL)removeFlatIconMapObject:(nullable NCFlatIconMapObject *)iconMapObject;

- (nullable NCPolylineMapObject *)addPolylineMapObject;

- (BOOL)removePolylineMapObject:(nullable NCPolylineMapObject *)polylineMapObject;

- (void)removeAllMapObjects;

- (void)pickMapObjectAt:(CGPoint)point;

- (void)pickMapFeatureAt:(CGPoint)point;

- (void)addPickListener:(nullable id<NCPickListener>)listener;

- (void)removePickListener:(nullable id<NCPickListener>)listener;

- (void)addInputListener:(nullable id<NCInputListener>)listener;

- (void)removeInputListener:(nullable id<NCInputListener>)listener;

- (void)addCameraListener:(nullable id<NCCameraListener>)listener;

- (void)removeCameraListener:(nullable id<NCCameraListener>)listener;

/**
 *
 * Move the map camera to a new position with an easing animation.
 *
 * @param camera The new camera position
 * @param duration The animation duration in milliseconds
 * @param completion A callback to execute when the animation completes
 *
 */
- (void)flyTo:(nonnull NCCamera *)camera
     duration:(int32_t)duration
     callback:(nullable NCCameraCallback)callback;

/**
 *
 * Move the map camera to a new position with an animation that pans and zooms in a smooth arc.
 *
 * The animation duration is calculated based on the distance to the new camera position and the specified speed
 *
 * @param camera The new camera position
 * @param duration Duration of the animation in milliseconds (-1 for default duration)
 * @param animationType The type of easing animation
 * @param callback A callback to execute when the animation completes
 *
 */
- (void)moveTo:(nonnull NCCamera *)camera
      duration:(int32_t)duration
 animationType:(NCAnimationType)animationType
      callback:(nullable NCCameraCallback)callback;

- (void)applyFilter:(nonnull NSString *)filter
              layer:(nonnull NSString *)layer;

- (void)setIcons:(nonnull NSDictionary<NSString *, UIImage *> *)icons;

+ (void)setDebugFlag:(NCDebugFlag)flag
                  on:(BOOL)on;

+ (BOOL)getDebugFlag:(NCDebugFlag)flag;

@property (nonatomic) float zoomFactor;

@property (nonatomic) float minZoomFactor;

@property (nonatomic) float maxZoomFactor;

@property (nonatomic) BOOL stickToBorder;

@property (nonatomic, nonnull) NCCamera * camera;

@property (nonatomic) BOOL rotateGestureEnabled;

@property (nonatomic) BOOL tiltGesturesEnabled;

@property (nonatomic) BOOL scrollGesturesEnabled;

@property (nonatomic) BOOL zoomGesturesEnabled;

/**
 *
 * Set the radius to use when picking features on the map. The default radius is 0.5 dp.
 * @param radius The radius in dp (density-independent pixels).
 *
 */
@property (nonatomic) float pickRadius;

@end
